{"version": 2, "width": 154, "height": 48, "timestamp": 1754974266, "env": {"SHELL": null, "TERM": "xterm-256color"}}
[3.665948, "o", "DEMO\r\n"]
[3.668686, "o", "infercode can run on multiple programming languages:\r\n1. Python example:\r\ninfercode setup.py\r\n"]
[8.173392, "o", "cat setup.py.embedding\r\n"]
[8.174842, "o", "[[-0.34869367 -0.32753167  1.8729268  -0.2401385  -0.85530853 -0.3721107\r\n   0.8470489  -0.39567226 -0.16359898 -0.3404718   0.04113773 -0.553091\r\n   2.6319647   0.11131165  0.23864478  0.5313365   0.11402381 -0.27347812\r\n  -0.41589013 -0.7504589   2.1095088   0.03807001 -0.9007217   0.47313195\r\n  -0.4382659   0.3529204  -0.41348562  0.23598695 -0.39066353 -0.49625903\r\n  -0.39279553  0.09969721  0.2386842   1.9716955   0.2938141  -0.43821612\r\n  -0.3058789  -0.24562195 -0.47598425 -0.62655425 -0.620399   -0.24393313\r\n  -0.52589643  1.214587   -0.07011794 -0.39732757 -0.20218971  0.8100331\r\n  -0.6359982   0.44150147  1.2604232  -0.6833078   1.2200814  -0.2040604\r\n   1.3275762   0.6558683  -0.6673053   0.00817979 -0.33580637  0.03986155\r\n   0.12473724 -0.4500925  -0.42885295 -0.05845099 -0.41641423 -0.3700939\r\n   0.930762   -0.07654351  0.22742428 -0.66772264 -0.14889117 -0.6984632\r\n  -0.4698516  -0.38524812 -0.09146022  0.7809279  -0.8668819  -0.2879755\r\n   0.35590944 -0.09129851 -0.38421986 -0.40771726  0.3591871  -0.31056648\r\n  -0.07628258 -0.36189967 -0.33444515 -0.40834638 -0.42026353 -0.5294022\r\n  -0.3568709  -0.47830278 -0.14156331  1.9180635   0.9935036  -0.19652113\r\n   0.84820527  0.1036137   0.22376484 -0.54272485]]\r\n"]
[10.177097, "o", "2. Rust example:\r\ncargo init --bin abc\r\n"]
[10.241875, "o", "\u001b[1m\u001b[32m    Creating\u001b[0m binary (application) package\r\n"]
[10.31105, "o", "\u001b[1m\u001b[36mnote\u001b[0m\u001b[1m:\u001b[0m see more `Cargo.toml` keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\r\n"]
[10.313573, "o", "cd abc\r\ncat src/main.rs\r\n"]
[10.314764, "o", "fn main() {\r\n    println!(\"Hello, world!\");\r\n}\r\n"]
[10.315066, "o", "infercode src/main.rs\r\n"]
[15.07203, "o", "cat src/main.rs.embedding\r\n"]
[15.073062, "o", "[[-0.5284024  -0.26927564  0.21316555 -0.60794604 -0.41296643 -0.6595138\r\n  -0.228333   -0.5197308  -0.0709165  -0.2754714   0.14840795 -0.08409995\r\n   2.1118352  -0.32150456  0.8557378  -0.21052273  0.74199253  0.53842336\r\n   0.36819503 -0.33566368  0.82748854 -0.53542095 -0.14057392 -0.30257443\r\n   0.04395032  1.6623228  -0.3487727   0.02734679  0.13001864 -0.3463903\r\n  -0.09531296  0.4126306  -0.53377134 -0.73548913 -0.3538352   0.18723151\r\n   0.4142483  -0.14114995 -0.412911   -0.6386881  -0.2900458   0.24443829\r\n  -0.49765444 -0.6271285   0.11924759 -0.5973623   0.7763224  -0.20463558\r\n  -0.40988013  1.9008256  -0.34763253 -0.1440556   1.3759717  -0.46220246\r\n   0.4523086   0.6280108  -0.34821478  0.0049291   0.84659207 -0.11284517\r\n  -0.13925558 -0.32054433 -0.4190451  -0.21575376  0.53874266  0.83652675\r\n   1.2797394  -0.3331002   0.48706096 -0.6285655  -0.3289004  -0.41855624\r\n  -0.28306872 -0.10353251 -0.32455438 -0.3230867   0.10399114 -0.49789435\r\n  -0.41805267 -0.53750837  0.82163507  0.26795915 -0.24613144  0.65904254\r\n  -0.3982464  -0.3144599  -0.320506    0.64252365  0.9576492   0.04686153\r\n   0.34799403 -0.46408126 -0.23957418  0.5571885  -0.4690026  -0.10224118\r\n   1.1318909   0.27544615 -0.24549103 -0.4561495 ]]\r\n"]
[15.073345, "o", "cd -\r\n/workspace/infercode\r\n"]
[15.073385, "o", "3. A C example from Rosetta Code:\r\ninfercode rosetta_code/100_doors/main.c\r\n"]
[21.582237, "o", "cat rosetta_code/100_doors/main.c.embedding\r\n"]
[21.583186, "o", "[[ 0.0877591   0.08121245  1.4916259   0.33097947 -0.56878126 -0.21184078\r\n   0.33276668 -0.04602392 -0.21027234 -0.39849982 -0.3427064  -0.09700102\r\n   0.2689394   0.37866104 -0.39500496  0.6692621  -0.37390167  0.3963732\r\n   0.0994719  -0.55888593  1.6277384   0.13019426 -0.5438895   0.58466995\r\n  -0.04592732  0.01111961 -0.4458022  -0.31794608 -0.49438137 -0.537444\r\n  -0.2264947   0.15096767 -0.6080778   2.2428093  -0.45009243 -0.322652\r\n  -0.29558378 -0.19802402 -0.8336151  -0.56752867 -0.45778283 -0.4558097\r\n  -0.7387403   1.929622   -0.07079121 -0.49695593 -0.4267159   0.12427391\r\n  -0.66720146  0.06931525  1.5345799  -0.51936346  1.8666571  -0.17978469\r\n   0.32068813 -0.37372777 -0.4898163   0.1953931  -0.39029363  0.41466236\r\n   0.14476046 -0.29509497 -0.62483996 -0.28324506  0.16297628 -0.3088544\r\n  -0.15070339 -0.29117876 -0.36331177 -0.59513855 -0.33147496 -0.7080143\r\n  -0.4779533  -0.20214099 -0.2148598   0.28080744 -0.4847175  -0.4901415\r\n  -0.17290264 -0.29983205  0.4076991  -0.8566055  -0.4791994  -0.14780632\r\n   0.7309552  -0.33457133 -0.27872294 -0.18510547  0.58424056  0.41429126\r\n  -0.1484935  -0.15711398 -0.01796287  1.457475    1.4219227  -0.375488\r\n   0.36798894  0.65249455 -0.34363496 -0.68001246]]\r\n"]
[23.585242, "o", "4. A C2Rust example in Rust:\r\ninfercode rosetta_code/100_doors/rust_c2rust/src/main.rs\r\n"]
[28.654717, "o", "cat rosetta_code/100_doors/rust_c2rust/src/main.rs.embedding\r\n"]
[28.655555, "o", "[[ 0.3437465   0.21608678  0.42890292 -0.11371253 -0.27787226 -0.547698\r\n  -0.309568   -0.2575029  -0.36481005 -0.31977537  0.3332509  -0.81827265\r\n   0.10035372 -0.05005437 -0.03182497  0.36588368 -0.21423058  0.4172016\r\n  -0.27072033 -0.5230142   1.9704282  -0.05567972 -0.8889098   0.19180274\r\n   0.91309804 -0.4143281  -0.53121364  0.43887568 -0.14385639 -0.6791251\r\n  -0.0377845   1.4183105  -0.44436356  0.8404695  -0.44081306 -0.47720376\r\n  -0.27704325 -0.10906219 -0.14518403 -0.57666177 -0.3863629  -0.24971528\r\n  -0.3871335   0.91991824  0.07281626  0.5499629  -0.45516104  0.5096127\r\n  -0.78036004  0.30093676  1.7958702  -0.47615948  0.4374961  -0.22878471\r\n   0.02902842 -0.23807079 -0.7896274  -0.11728447 -0.24895942 -0.18315694\r\n   0.21302341 -0.19577421 -0.36303753 -0.50167346  0.36113235 -0.39974594\r\n  -0.40307868 -0.58130187 -0.2658957  -0.76542383 -0.05808043 -0.776224\r\n  -0.278197    0.8221949  -0.13329029  0.6989099  -0.6059611  -0.00898953\r\n  -0.2244375  -0.500007    0.00795984 -0.7341549  -0.43914017 -0.57565963\r\n  -0.31433457 -0.5393371  -0.37392285 -0.24267034 -0.47180718 -0.14398544\r\n  -0.16976038  0.09363244  0.31370333  2.38669     0.69424576 -0.33485937\r\n   0.28736436  0.64937204 -0.06987582 -0.31334755]]\r\n"]
[30.657566, "o", "5. A CRustS example in Rust:\r\ninfercode rosetta_code/100_doors/rust_crusts/src/main.rs\r\n"]
[35.574729, "o", "cat rosetta_code/100_doors/rust_crusts/src/main.rs.embedding\r\n"]
[35.575757, "o", "[[ 3.4302431e-01  3.0485353e-02  1.0996335e+00 -3.7181068e-02\r\n  -5.1436067e-01 -5.2195442e-01 -3.5351792e-01  2.0337835e-02\r\n  -1.5766507e-01 -3.8095200e-01  1.8026993e-01 -6.7663491e-01\r\n   2.3630859e-01  1.9811189e-01 -2.6308885e-01  5.5675292e-01\r\n  -2.4352534e-01  3.5015833e-01 -1.9565795e-01 -5.4146194e-01\r\n   2.5484276e+00  3.2521698e-01 -8.7818772e-01  5.3485501e-01\r\n   1.7809467e-01 -2.1842563e-01 -5.0998765e-01 -2.5140542e-01\r\n  -1.3374883e-01 -6.8817824e-01 -1.2611236e-01  1.0412427e+00\r\n  -3.8387373e-01  1.9866490e+00 -3.6036471e-01 -3.6770001e-01\r\n  -2.4459150e-01  1.4964095e-02 -7.4119979e-01 -5.0483817e-01\r\n  -4.0442401e-01 -1.9689405e-01 -5.4742241e-01  1.6447464e+00\r\n   1.7626399e-01  5.5499088e-02 -2.0933156e-01  2.1379871e-02\r\n  -5.4174399e-01  3.0689940e-01  1.7443056e+00 -3.9854208e-01\r\n   1.1244643e+00  6.3170306e-03 -3.1362280e-02 -4.2676541e-01\r\n  -7.8472817e-01  1.5423128e-01 -1.9136538e-01  2.3069014e-01\r\n   1.1027568e-01 -3.3134529e-01 -4.4812834e-01 -3.6707047e-01\r\n   2.3703238e-01 -5.2065051e-01 -5.0042951e-01 -5.2709800e-01\r\n  -2.2857887e-01 -7.6798368e-01 -2.3796631e-01 -8.0509794e-01\r\n  -3.0785623e-01  5.6894749e-01 -2.6597744e-01  3.5603225e-01\r\n  -7.6871055e-01 -3.2824582e-01 -2.2595587e-01 -4.5313340e-01\r\n  -1.3928601e-01 -7.7529252e-01 -6.4415139e-01 -4.8990065e-01\r\n  -3.0447155e-01 -5.9766495e-01 -3.6343628e-01 -1.8840155e-01\r\n  -2.3467956e-01 -1.6197206e-01 -2.4372719e-01  5.5928200e-02\r\n   1.4630798e-03  2.0985954e+00  1.0440905e+00 -3.5231400e-01\r\n   4.1076559e-01  7.4825895e-01 -5.1433998e-01 -1.5786906e-01]]\r\n"]
[37.577449, "o", "infercode can compare similarity of code regardless of programming languages, e.g., C or Rust.\r\n6. The cosine similarity among them:\r\ninfercode rosetta_code/100_doors/main.c rosetta_code/100_doors/rust_crusts/src/main.rs\r\n"]
[46.761886, "o", "1,17c1,42\r\n< #include <stdio.h>\r\n<  \r\n< int main()\r\n< {\r\n<   char is_open[100] = { 0 };\r\n<   int pass, door;\r\n<  \r\n<   /* do the 100 passes */\r\n<   for (pass = 0; pass < 100; ++pass)\r\n<     for (door = pass; door < 100; door += pass+1)\r\n<       is_open[door] = !is_open[door];\r\n<  \r\n<   /* output the result */\r\n<   for (door = 0; door < 100; ++door)\r\n<     printf(\"door #%d is %s.\\n\", door+1, (is_open[door]? \"open\" : \"closed\"));\r\n<  \r\n<   return 0;\r\n---\r\n> #![allow(\r\n>     dead_code,\r\n>     mutable_transmutes,\r\n>     non_camel_case_types,\r\n>     non_snake_case,\r\n>     non_upper_case_globals,\r\n>     unused_assignments,\r\n>     unused_mut\r\n> )]\r\n> #![register_tool(c2rust)]\r\n> #![feature(main, register_tool)]\r\n> use ::rust::*;\r\n> use std::process::exit;\r\n> extern \"C\" {}\r\n> fn main_0() -> i32 {\r\n>     let mut is_open: [i8; 100] = [0; 100];\r\n>     let mut pass: i32 = 0;\r\n>     let mut door: i32 = 0;\r\n>     pass = 0;\r\n>     while pass < 100 {\r\n>         door = pass;\r\n>         while door < 100 {\r\n>             is_open[door as usize] = (is_open[door as usize] == 0) as i8;\r\n>             door += pass + 1\r\n>         }\r\n>         pass += 1\r\n>     }\r\n>     door = 0;\r\n>     while door < 100 {\r\n>         if is_open[door as usize] as i32 != 0 {\r\n>             print!(\"door #{} is {}.\\n\", door + 1, \"open\")\r\n"]
[46.762191, "o", ">         } else {\r\n>             print!(\"door #{} is {}.\\n\", door + 1, \"closed\")\r\n>         };\r\n>         door += 1\r\n>     }\r\n>     return 0;\r\n> }\r\n> \r\n> #[main]\r\n> pub fn main() {\r\n>     exit(main_0() as i32);\r\n"]
[48.722723, "o", "Cosine Similarity: 0.8717\r\n"]
[51.265169, "o", "infercode rosetta_code/100_doors/main.c rosetta_code/100_doors/rust_c2rust/src/main.rs\r\n"]
[61.49058, "o", "1,17c1,150\r\n< #include <stdio.h>\r\n<  \r\n< int main()\r\n< {\r\n<   char is_open[100] = { 0 };\r\n<   int pass, door;\r\n<  \r\n<   /* do the 100 passes */\r\n<   for (pass = 0; pass < 100; ++pass)\r\n<     for (door = pass; door < 100; door += pass+1)\r\n<       is_open[door] = !is_open[door];\r\n<  \r\n<   /* output the result */\r\n<   for (door = 0; door < 100; ++door)\r\n<     printf(\"door #%d is %s.\\n\", door+1, (is_open[door]? \"open\" : \"closed\"));\r\n<  \r\n<   return 0;\r\n---\r\n> #![allow(\r\n>     dead_code,\r\n>     mutable_transmutes,\r\n>     non_camel_case_types,\r\n>     non_snake_case,\r\n"]
[61.49089, "o", ">     non_upper_case_globals,\r\n>     unused_assignments,\r\n>     unused_mut\r\n> )]\r\n> #![register_tool(c2rust)]\r\n> #![feature(main, register_tool)]\r\n> use ::rust::*;\r\n> extern \"C\" {\r\n>     #[no_mangle]\r\n>     fn printf(_: *const libc::c_char, _: ...) -> libc::c_int;\r\n> }\r\n> unsafe fn main_0() -> libc::c_int {\r\n>     let mut is_open: [libc::c_char; 100] = [\r\n>         0 as libc::c_int as libc::c_char,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n"]
[61.490975, "o", ">         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n"]
[61.491046, "o", ">         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,"]
[61.491091, "o", "\r\n>         0,\r\n>         0,\r\n>         0,\r\n"]
[61.491124, "o", ">         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n"]
[61.491158, "o", ">         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,"]
[61.491183, "o", "\r\n>         0,\r\n>         0,\r\n>         0,\r\n"]
[61.491204, "o", ">     ];\r\n>     let mut pass: libc::c_int = 0;\r\n"]
[61.491227, "o", ">     let mut door: libc::c_int = 0;\r\n>     /* do the 100 passes */\r\n>     pass = 0 as libc::c_int;\r\n"]
[61.491256, "o", ">     while pass < 100 as libc::c_int {\r\n>         door = pass;\r\n>         while door < 100 as libc::c_int {\r\n>             is_open[door as usize] = (is_open[door as usize] == 0) as libc::c_int as libc::c_char;\r\n>             door += pass + 1 as libc::c_int"]
[61.491295, "o", "\r\n>         }\r\n>         pass += 1\r\n"]
[61.491688, "o", ">     }\r\n>     /* output the result */\r\n>     door = 0 as libc::c_int;\r\n>     while door < 100 as libc::c_int {\r\n"]
[61.491755, "o", ">         printf(\r\n>             b\"door #%d is %s.\\n\\x00\" as *const u8 as *const libc::c_char,\r\n>             door + 1 as libc::c_int,\r\n>             if is_open[door as usize] as libc::c_int != 0 {\r\n>                 b\"open\\x00\" as *const u8 as *const libc::c_char\r\n>             } else {\r\n>                 b\"closed\\x00\" as *const u8 as *const libc::c_char\r\n>             },\r\n>         );\r\n>         door += 1\r\n>     }\r\n>     return 0 as libc::c_int;\r\n> }\r\n> #[main]\r\n> pub fn main() {\r\n>     unsafe { ::std::process::exit(main_0() as i32) }\r\n"]
[63.250439, "o", "Cosine Similarity: 0.6979\r\n"]
[65.760962, "o", "infercode rosetta_code/100_doors/rust_crusts/src/main.rs rosetta_code/100_doors/rust_c2rust/src/main.rs\r\n"]
[76.146929, "o", "13,20c13,124\r\n< use std::process::exit;\r\n< extern \"C\" {}\r\n< fn main_0() -> i32 {\r\n<     let mut is_open: [i8; 100] = [0; 100];\r\n<     let mut pass: i32 = 0;\r\n<     let mut door: i32 = 0;\r\n<     pass = 0;\r\n<     while pass < 100 {\r\n---\r\n> extern \"C\" {\r\n>     #[no_mangle]\r\n>     fn printf(_: *const libc::c_char, _: ...) -> libc::c_int;\r\n> }\r\n> unsafe fn main_0() -> libc::c_int {\r\n>     let mut is_open: [libc::c_char; 100] = [\r\n>         0 as libc::c_int as libc::c_char,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,"]
[76.147111, "o", "\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n"]
[76.147279, "o", ">         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>         0,\r\n>     ];\r\n>     let mut pass: libc::c_int = 0;\r\n>     let mut door: libc::c_int = 0;\r\n>     /* do the 100 passes */\r\n>     pass = 0 as libc::c_int;\r\n>     while pass < 100 as libc::c_int {\r\n22,24c126,128\r\n<         while door < 100 {\r\n<             is_open[door as usize] = (is_open[door as usize] == 0) as i8;\r\n<             door += pass + 1\r\n---\r\n>         while door < 100 as libc::c_int {\r\n>             is_open[door as usize] = (is_open[door as usize] == 0) as libc::c_int as libc::c_char;\r\n>             door += pass + 1 as libc::c_int\r\n28,34c132,143\r\n<     door = 0;\r\n<     while door < 100 {\r\n<         if is_open[door as usize] as i32 != 0 {\r\n<             print!(\"door #{} is {}.\\n\", door + 1, \"open\")\r\n<         } else {\r\n<             print!(\"door #{} is {}.\\n\", door + 1, \"closed\")\r\n<         };\r\n---\r\n>     /* output the result */\r\n>     door = 0 as libc::c_int;\r\n>     while door < 100 as libc::c_int {\r\n>         printf(\r\n>             b\"door #%d is %s.\\n\\x00\" as *const u8 as *const libc::c_char,\r\n>             door + 1 as libc::c_int,\r\n>             if is_open[door as usize] as libc::c_int != 0 {\r\n>                 b\"open\\x00\" as *const u8 as *const libc::c_char\r\n>             } else {\r\n>                 b\"closed\\x00\" as *const u8 as *const libc::c_char\r\n>             },\r\n>         );\r\n37c146\r\n<     return 0;\r\n---\r\n>     return 0 as libc::c_int;\r\n39d147\r\n< \r\n42c150\r\n<     exit(main_0() as i32);\r\n---\r\n>     unsafe { ::std::process::exit(main_0() as i32) }\r\n"]
[78.068613, "o", "Cosine Similarity: 0.9019\r\n"]
[80.430011, "o", "7. The cosine similarity between different algorithms in Rust:\r\ninfercode rosetta_code/100_doors/rust_c2rust/src/main.rs abc/src/main.rs\r\n"]
[90.630859, "o", "1,150c1,2\r\n< #![allow(\r\n<     dead_code,\r\n<     mutable_transmutes,\r\n<     non_camel_case_types,\r\n<     non_snake_case,\r\n<     non_upper_case_globals,\r\n<     unused_assignments,\r\n<     unused_mut\r\n< )]\r\n< #![register_tool(c2rust)]\r\n< #![feature(main, register_tool)]\r\n< use ::rust::*;\r\n< extern \"C\" {\r\n<     #[no_mangle]\r\n<     fn printf(_: *const libc::c_char, _: ...) -> libc::c_int;\r\n< }\r\n< unsafe fn main_0() -> libc::c_int {\r\n<     let mut is_open: [libc::c_char; 100] = [\r\n<         0 as libc::c_int as libc::c_char,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n"]
[90.631159, "o", "<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n"]
[90.631392, "o", "<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<         0,\r\n<     ];\r\n<     let mut pass: libc::c_int = 0;\r\n<     let mut door: libc::c_int = 0;\r\n<     /* do the 100 passes */\r\n<     pass = 0 as libc::c_int;\r\n<     while pass < 100 as libc::c_int {\r\n<         door = pass;\r\n<         while door < 100 as libc::c_int {\r\n<             is_open[door as usize] = (is_open[door as usize] == 0) as libc::c_int as libc::c_char;\r\n<             door += pass + 1 as libc::c_int\r\n<         }\r\n<         pass += 1\r\n<     }\r\n<     /* output the result */\r\n<     door = 0 as libc::c_int;\r\n<     while door < 100 as libc::c_int {\r\n<         printf(\r\n<             b\"door #%d is %s.\\n\\x00\" as *const u8 as *const libc::c_char,\r\n<             door + 1 as libc::c_int,\r\n<             if is_open[door as usize] as libc::c_int != 0 {\r\n<                 b\"open\\x00\" as *const u8 as *const libc::c_char\r\n<             } else {\r\n<                 b\"closed\\x00\" as *const u8 as *const libc::c_char\r\n<             },\r\n<         );\r\n<         door += 1\r\n<     }\r\n<     return 0 as libc::c_int;\r\n< }\r\n< #[main]\r\n< pub fn main() {\r\n<     unsafe { ::std::process::exit(main_0() as i32) }\r\n---\r\n> fn main() {\r\n>     println!(\"Hello, world!\");\r\n"]
[92.506839, "o", "Cosine Similarity: 0.1353\r\n"]
[92.938442, "o", "The End\r\n"]
